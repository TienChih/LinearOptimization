<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="sec-summaryflow" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Summary of <xref ref="ch-flow"/></title>

  <p>
    We use introduce the notion of   <term>networks</term>, a pair <m>N=(V, E)</m> where <m>V</m> is a set of <term>vertices</term> and <m>E</m> is a set of ordered pairs of vertices called <term>edges</term>.  We also discuss <term>capacitated networks</term> where each edge <m>(v_i, v_j)</m> has a <term>capacity</term> <m>c_{ij}\geq 0</m>.  For capacitated networks with designated <term>sources</term> and <term>sinks</term>, we can define a <term>flow</term>, an assignment  <m>0\leq x_{ij}\leq c_{ij}</m> to each edge <m>(v_i, v_j)</m> so that for any non source/sink vertex <m>v_i</m> we have that <me>\sum_{v_j\in V} x_{ji} - \sum x_{ij} =0.</me> We focus on capacitated networks with a unique source and sink, with no edges going into the source or out of the sink.
  </p>
  <p>
    Finding a  <term>maximum flow</term> on such a network may be solved as a linear optimization problem:
    <md>
          <mrow>\textbf{Maximize: }  \displaystyle \sum_{i} x_{id}</mrow>
          <mrow>\textbf{subject to: }  \sum_{v_i\in V}x_{ij} - \sum_{v_i\in V} x_{ji} \amp =  0, \text{for each non source/sink vertex }v_j</mrow>
          <mrow> x_{ij}\amp \leq  c_{ij}, \text{for each edge} (v_i, v_j)</mrow>
          <mrow> x_{ij}\amp \geq  0, \text{for each edge} (v_i, v_j).</mrow>
    </md>

    Another problem on such a network is the <term>minimum cut</term>, a <term>cut</term> is a pair <m>(V_1, V_2)</m> so the <m>V</m> is the disjoint union on <m>V_1, V_2</m>, <m>v_s\in V_1</m> and <m>v_d\in V_2</m>.  The <term>capacity</term> of a cut is the sum <me>\sum_{v_i\in V_1, v_j\in V_2}x_{ij}.</me>. Careful analysis of the dual problem to the maximum flow problem shows that the capacity of any cut is an upper bound for the value of any flow.
        
  </p>
  <figure xml:id="figure-videochapter7LOFormulation">
    <caption>A linear optimization formulation of maximum flow and minimum cut.</caption>
    <video playat = "select" source = "images/Chapter7-LOFormulation.mp4" preview="images/Chapter7-LOFormulation.png"/>
  </figure>

  <p>
    The <term>Ford-Fulkerson Algorithm</term> <xref ref="def-maxflowalgorithm"/> which identifies a maximum flow.  Then, starting with <m>V_1=\{v_s\}</m>, we recursively add vertices <m>v_i</m> to <m>V_1</m> if there is an edge from <m>V_1</m> to <m>v_i</m> which is not at maximum capacity, or a backwards edge from <m>v_i</m> to <m>V_1</m>.  When this is done, we let <m>V_2=V\backslash V_1</m> and this forms a cut who by construction, has the same capacity as the maximum flow.  So by the Weak Duality Theorem, both are optimal. 
  </p>
  <figure xml:id="figure-videochapter7FordFulkerson">
    <caption>The Ford-Fulkerson algorithm and finding max flows/min cuts.</caption>
    <video playat = "select" source = "images/Chapter7-FordFulkerson.mp4" preview="images/Chapter7-FordFulkerson.png"/>
  </figure>
  <p>
    Another type of network is a <term>weighted</term> network, where each edge <m>(v_i, v_j)</m> has a potentially negative weight <m>w_{ij}</m>.   <term>Dijkstra's Shortest Path Algorithm</term> <xref ref="def-DijkstrasAlgorithm"/> describes an algorithm which identifies the distance (sum of weights) from a starting source <m>v_s</m> to any other vertex <m>v_i</m> in the network, by labeling each vertex with the current shortest distance from <m>v_s</m> to <m>v_i</m> and relabeling and readjusting as shorter distances are found.
  </p>
  <figure xml:id="figure-videochapter7shortestpath">
    <caption>Dijkstra's Shortest Path algorithm and finding the shortest path between vertices.</caption>
    <video playat = "select" source = "images/Chapter7-ShortestPath.mp4" preview="images/Chapter7-ShortestPath.png"/>
  </figure>

  <p>
    The shortest path algorithm has a useful application in the Minimum Cost Flow Algorithm <xref ref="def-mincostflowalgorithm"/>.  In this problem, we try to find a flow of value <m>F</m> from <m>v_s</m> to <m>v_d</m> on a weighted capacitated network that minimizes the cost to do so.  One can identify shortest paths from <m>v_s</m> to <m>v_d</m> and increase flows along this path, and repeat recursively.  However, doing so greedily may result in non-optimal solutions.  We construct a second network <m>N'</m> where backwards edges with negative weight are added for flows on <m>N</m> to represent the ability to reduce flow along edges, and the shortest paths are found on <m>N'</m>.  Doing so repeatedly results in the actual minimum cost flow.
  </p>

  <figure xml:id="figure-videochapter7mincostflow">
    <caption>Minimum Cost Flow algorithm and finding the minimum cost flow of a given value.</caption>
    <video playat = "select" source = "images/Chapter7-MinCostFlow.mp4" preview="images/Chapter7-MinCostFlow.png"/>
  </figure>
  

        
        
  



  

</section>