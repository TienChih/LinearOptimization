<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="sec-weighted" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Weighted Graphs</title>


  <exploration xml:id="exploration-path">
    <introduction>
      <p>
        Dr. Ayad is driving from her home to Fantasi college.  The town is connected by a series of one way streets,
        each labled with the time it would take to traverse the road.
      </p>
      <image xml:id="traffic">
        <description>A Network Flow depicting several nodes and edges with weights.</description>
        <latex-image>
          \begin{tikzpicture}[
            mycircle/.style={
              circle,
              draw=black,
              fill=gray,
              fill opacity = 0.3,
              text opacity=1,
              inner sep=0pt,
              minimum size=20pt,
              font=\small},
            myarrow/.style={-Stealth},
            node distance=0.6cm and 1.2cm
            ]
            \node[mycircle] (s) {$v_0$};
            \node[mycircle,below right=of s] (v2) {$v_2$};
            \node[mycircle,right=of v2] (v4) {$v_4$};
            \node[mycircle,above right=of s] (v1) {$v_1$};
            \node[mycircle,right=of v1] (v3) {$v_3$};
            \node[mycircle,below right=of v3] (t) {$v_5$};

          \draw[->] (s) --node[above, sloped]{\tiny$3$} (v1);
          \draw[->] (s) --node[above , sloped]{\tiny$13$} (v2);
          \draw[->] (v1.280) --node[above , sloped]{\tiny$12$} (v2.80);
          \draw[->] (v2.100) --node[above , sloped]{\tiny$6$} (v1.260);
          \draw[->] (v1)--node[above , sloped]{\tiny$4$}(v3);
          \draw[->] (v1)--node[above , sloped , pos=0.15 ]{\tiny$10$}(v4);
          \draw[->] (v2)--node[above , sloped ]{\tiny$2$}(v4);
          \draw[->] (v4)--node[above , sloped]{\tiny$5$}(v3);
          \draw[->] (v3)--node[above , sloped]{\tiny$22$}(t);
          \draw[->] (v3)--node[above , sloped, pos=0.15]{\tiny$6$}(v2);
          \draw[->] (v4)--node[above , sloped]{\tiny$8$}(t);
          \end{tikzpicture}

        </latex-image>
      </image> 
      
      
    </introduction>
    <task>
      <statement>
        <p>
          What is the shortest amout of time needed for her to arrive at Fantasi College?

        
      </p>
      </statement>
    </task>
    <task>
      <statement>
        <p>
          Is there a unique route she could take that minimizes this time?

        
      </p>
      </statement>
    </task>
  </exploration>

  <definition xml:id="def-weightedgraph">
    <statement>
     
      <p>
        A network is <em>weighted</em> if for each edge <m>(v_i, v_j)\in E</m>
        we assign (potentially negative!) weight <m>w_{ij}</m>. 
      </p>
      
    </statement>
  </definition>

  <definition xml:id="def-path">
    <statement>
      <p>
        Give a network <m>N</m>, a <em>path</em> <m>P</m> from <m>v_x</m>, <m>v_y</m> is a sequence of consecutive edges <m>(v_{a_0}, v_{a_1}), \ldots (v_{a_i}, v_{a_{i+1}}),\ldots, (v_{a_{k-1}}, v_{a_k})</m>
        where <m>v_{a_0}=v_x, v_{a_k}=v_y</m>.  We say that the <em>length</em> of <m>P</m> is <m>\displaystyle \sum_{i=0}^{k-1}w_{a_ia_{i+1}}</m>.   We say that the
        <em>distance</em> from <m>v_x</m> to <m>v_y</m>, <m>d(v_x, v_y)</m>, is the length of a shortest path from <m>v_x</m> to <m>v_y</m>.
      </p>
    </statement>
  </definition>


  <activity>
    <introduction>
      <p>
        Consider the weighted network: 
      </p>
      <image xml:id="negativecycle">
        <description>A network with negative weights.</description>
        <latex-image>
          \begin{tikzpicture}[
            mycircle/.style={
              circle,
              draw=black,
              fill=gray,
              fill opacity = 0.3,
              text opacity=1,
              inner sep=0pt,
              minimum size=20pt,
              font=\small},
            myarrow/.style={-Stealth},
            node distance=0.6cm and 1.2cm
            ]
            \node[mycircle] (s) {$v_0$};
            \node[mycircle, right=of s] (v1) {$v_1$};
            \node[mycircle, below left=of v1] (v2) {$v_2$};
            \node[mycircle, below right=of v1] (v3) {$v_3$};
            \node[mycircle,right=of v1] (v4) {$v_4$};

          \draw[->] (s) --node[above, sloped]{\tiny$3$} (v1);
          \draw[->] (v1) --node[above , sloped]{\tiny$2$} (v2);
          \draw[->] (v2)--node[above , sloped ]{\tiny$-6$}(v3);
          \draw[->] (v3)--node[above , sloped]{\tiny$3$}(v1);
          \draw[->] (v1)--node[above , sloped]{\tiny$4$}(v4);
          \end{tikzpicture}

        </latex-image>
      </image> 
    </introduction>
    <task>
      <p>
        What is the shortest path from <m>v_0</m> to <m>v_4</m>?  (You may repeat edges.)
      </p>
    </task>
    <task>
      <p>
        What if we change <m>w_{23}=-1</m>?
      </p>
    </task>
    <task>
      <statement>
        <p>
          What is a reasonable condition for the shortest path to be well defined?
        </p>
      </statement>
    </task>
  </activity>

  <definition xml:id="def-negativecycle">
    <statement>
      <p>
        We define a <em> cycle</em> in a weighted network to be a path froma vertex <m>v_x</m> to itself.  If the length of a cycle is negative,
        we call it a <em>negative cycle</em>.
      </p>
    </statement>
  </definition>


  <activity>
    <introduction>
      <p>
        In this activity, we model the shortest path algorithm as a linear programming problem.  Assume <m>N</m> is a weighted network with no negative cycles.  Let <m>0\leq x_{ij}\leq 1</m>
        where <m>x_{ij}=1</m> if <m>(v_i, v_j)</m> is in a shortest path <m>P</m> from <m>v_s</m> to <m>v_d</m>.
      </p>
    </introduction>
    <task>
      <p>
        What is the objective problem?
      </p>
      <ol marker="A." cols="2">
        <li>
          <p>
            Maximize <m>\displaystyle \sum_i w_{it}x_{it} </m>.
          </p>
        </li>
        <li>
          <p>
            Maximize <m>\displaystyle \sum_j w_{sj}x_{sj} </m>.
          </p>
        </li>
        <li>
          <p>
            Maximize <m>\displaystyle \sum_{i,j} w_{ij}x_{ij} </m>.
          </p>
        </li>
        <li>
          <p>
            Minimize <m>\displaystyle \sum_i w_{it}x_{it} </m>.
          </p>
        </li>
        <li>
          <p>
            Minimize <m>\displaystyle \sum_j w_{sj}x_{sj} </m>.
          </p>
        </li>
        <li>
          <p>
            Minimize <m>\displaystyle \sum_{i,j} w_{ij}x_{ij} </m>.
          </p>
        </li>
      </ol>
    </task>
    <task>
      <statement>
        <p>
          What inequality ensures that  exactly one edge of the chosen edges is incident to <m>v_d</m>?
        </p>
        <ol marker="A." cols="2">
          <li>
            <p>
              <m>\displaystyle \sum_i x_{id} \leq 1</m>.
            </p>
          </li>
          <li>
            <p>
              <m>\displaystyle \sum_i x_{id} \geq 1</m>.
            </p>
          </li>
          <li>
            <p>
              <m>\displaystyle \sum_i x_{id} = 1</m>.
            </p>
          </li>
          <li>
            <p>
              <m>\displaystyle \sum_i x_{id} \leq 0</m>.
            </p>
          </li>
          <li>
            <p>
              <m>\displaystyle \sum_i x_{id} \geq 0</m>.
            </p>
          </li>
          <li>
            <p>
              <m>\displaystyle \sum_i x_{id} = 0</m>.
            </p>
          </li>
        </ol>
      </statement>
    </task>
    <task>
      <statement>
        <p>
          What inequality ensures that the chosen edges form a path?
        </p>
        <ol marker="A." cols="2">
          <li>
            <p>
              For each vertex <m>v_i\neq v_s, v_d</m>, <m>\displaystyle \sum_{j} x_{ji} - \sum_{j} x_{ij}=1</m>.
            </p>
          </li>
          <li>
            <p>
              For each vertex <m>v_i\neq v_s, v_d</m>, <m>\displaystyle \sum_{j} x_{ji} - \sum_{j} x_{ij}\leq 1</m>.
            </p>
          </li>
          <li>
            <p>
              For each vertex <m>v_i\neq v_s, v_d</m>, <m>\displaystyle \sum_{j} x_{ji} - \sum_{j} x_{ij}\geq 1</m>.
            </p>
          </li>
          <li>
            <p>
              For each vertex <m>v_i\neq v_s, v_d</m>, <m>\displaystyle \sum_{j} x_{ji} - \sum_{j} x_{ij}=0</m>.
            </p>
          </li>
          <li>
            <p>
              For each vertex <m>v_i\neq v_s, v_d</m>, <m>\displaystyle \sum_{j} x_{ji} - \sum_{j} x_{ij}\leq 0</m>.
            </p>
          </li>
          <li>
            <p>
              For each vertex <m>v_i\neq v_s, v_d</m>, <m>\displaystyle \sum_{j} x_{ji} - \sum_{j} x_{ij}\geq 0</m>.
            </p>
          </li>
        </ol>
      </statement>
    </task>
    <task>
      <statement>
        <p>
          Why do we not need a constraint for <m>v_s</m>?
        </p>
      </statement>
    </task>
    <task>
      <statement>
        <p>
          Model the shortest path problem in <xref ref="exploration-path"/> as a linear programming problem and solve it:
        </p>
        <p>
          <sage>
            <input>
              %display typeset
              A = (FIXME)
              b = (FIXME)
              c = (FIXME)
              P = InteractiveLPProblem(A, b, c,
               [FIXME], 
               constraint_type = [FIXME],
               variable_type = [FIXME],
               problem_type = FIXME)
              P
            </input>         
            </sage>
            <sage>
              <input>
                print(P.optimal_solution())
                print(P.optimal_value())
              </input>         
            </sage>
      </p>
      </statement>
    </task>
  </activity>

  <p>
    As was the case in previous examples, we introduce a less cumbersome method for finding these shortest paths.
  </p>

  <definition xml:id="def-DijkstrasAlgorithm">
    <title>Dijkstra's Algorithm</title>
    
    
    <statement>
      <p>
        Let <m>N</m> be a weighted network with only non-negative weights.  Then <em>Dijkstra's Shortest Path Algorithm</em> is as follows:
      </p>
      <ol>
        <li>
          <p>
            INITIALIZE: Let <m>R=\{v_s\}</m> and let <m>T=V\backslash R</m>.  Label <m>\ell_s=0</m>, <m>\ell_i = w_{si}</m>
            if <m>w_{si}</m> exists, <m>\infty</m> otherwise.
          </p>
        </li>
        <li>
          <p>
            Let <m>\ell_k=\displaystyle \min_{i\in T} \ell_i</m>.
          </p>
        </li>
        <li>
          <p>
            Let <m>R=R\cup \{v_k\}, T=V\backslash R</m>.
          </p>
        </li>
        <li>
          <p>
            If <m>T=\emptyset</m>: STOP.
          </p>
        </li>
        <li>
          <p>
            For each <m>v_j\in T</m>, let <m> \ell_j=\min\{\ell_j, \ell_j+w_{kj}\}</m>.
          </p>
        </li>
        <li>
          <p>
            GOTO 2.
          </p>
        </li>
      </ol>
      <p>
        When the algorithm terminates, <m>\ell_j = d(v_s, v_j)</m>, the length of the shortest path from <m>v_s</m> to <m>v_j</m>.
      </p>
    </statement>
  </definition>

  <activity>
    <statement>
      <p>
        Apply <xref ref="def-DijkstrasAlgorithm"/> to the shortest path problem in <xref ref="exploration-path"/>.
      </p>
    </statement>
  </activity>

  <activity>
    <introduction>
      <p>
        We prove that in <xref ref="def-DijkstrasAlgorithm"/>, <m>\ell_i=d(v_s, v_i)</m> for each <m>v_i\in R</m> via induction on <m>|R|</m>.
      </p>
    </introduction>
    <task>
      <statement>
        <p>
          Verify that the statement is true when <m>|R|=1</m>.
        </p>
      </statement>
    </task>

    <task>
      <statement>
        <p>
          Prove that in step 3, if we select <m>v_k</m> then <m>v_k</m> is adjacent to a vertex in <m>v_{k}'\in R</m>.
        </p>
      </statement>
    </task>

    <task>
      <statement>
        <p>
          Let <m>|R|=m\geq 1</m> and consider <m>v_k, \ell_k</m> as chosen in step 3.  Show that <m>\ell_k</m> is the shortest distance from <m>v_s</m>
          to <m>v_k</m> traversing only vertices in <m>R\cup \{v_k\}</m>.
        </p>
      </statement>
    </task>
    <task>
      <statement>
        <p>
          Suppose (by way of contradiction) that there was a shortest path <m>P</m> from <m>v_s</m> to <m>v_k</m> where the length of <m>P\lt \ell_k</m>.  Show that
          there must be an edge in <m>P</m>, <m>(v_x,v_y</m>) so that <m>v_x\in R, v_y\not \in R, v_y\neq v_k</m>.
        </p>
      </statement>
    </task>
    <task>
      <statement>
        <p>
          Show that in this case that <m>\ell_x+w_{xy}\leq \ell_k</m>.  (Invoke the induction hypothesis).
        </p>
      </statement>
    </task>
    <task>
      <statement>
        <p>
          Show that the last statement produces a contradiction (why wasn't <m>y</m> already chosen?)
        </p>
      </statement>
    </task>
    <task>
      <statement>
        <p>
          Conclude that <m>d(v_s, v_k)=\ell_k</m>.
        </p>
      </statement>
    </task>
  </activity>

  <p>
    We present an alternative algorithm for when weights can be negative.
  </p>

  <definition xml:id="def-otheralgorithm">
    
    
    <statement>
      <p>
        Let <m>N</m> be a weighted network with no negative cycles.  Then an algorithm to find shortest paths is as follows:
      </p>
      <ol>
        <li>
          <p>
            INITIALIZE: Let <m>R=\{v_s\}</m> and let <m>T=V\backslash R</m>.  Label <m>\ell_s=0</m>, <m>\ell_i = w_{si}</m>
            if <m>w_{si}</m> exists, <m>\infty</m> otherwise.
          </p>
        </li>
        <li>
          <p>
            Let <m>\ell_k=\displaystyle \min_{i\in T} \ell_i</m>.
          </p>
        </li>
        <li>
          <p>
            Let <m>R=R\cup \{v_k\}, T=V\backslash R</m>.
          </p>
        </li>
        <li>
          <p>
            If <m>T=\emptyset</m>: STOP.
          </p>
        </li>
        <li>
          <p>
            For each <m>v_j\in V</m>, let <m> \ell_j=\min\{\ell_j, \ell_j+w_{kj}\}</m>, if <m>v_j\in R</m> has a value changed by this process, remove <m>v_j</m> from <m>R</m> and add it to <m>T</m>.
          </p>
        </li>
        <li>
          <p>
            GOTO 2.
          </p>
        </li>
      </ol>
      <p>
        When the algorithm terminates, <m>\ell_j = d(v_s, v_j)</m>, the length of the shortest path from <m>v_s</m> to <m>v_j</m>.
      </p>
    </statement>
  </definition>


  <exploration>
    <introduction>
      <p>
        Suppose a shipping company is moving goods through a series of
        transportation hubs via rail.  The maximum capcity in tons and the cost in
        thousands of dollars per ton are listed as an ordered pair:

        <image xml:id="train">
          <description>A Network Flow depicting several hubs with rails showing capacity and cost.</description>
          <latex-image>
            \begin{tikzpicture}[
              mycircle/.style={
                circle,
                draw=black,
                fill=gray,
                fill opacity = 0.3,
                text opacity=1,
                inner sep=0pt,
                minimum size=20pt,
                font=\small},
              myarrow/.style={-Stealth},
              node distance=0.6cm and 1.2cm
              ]
              \node[mycircle] (s) {$v_0$};
              \node[mycircle,below right=of s] (v2) {$v_2$};
              \node[mycircle,right=of v2] (v4) {$v_4$};
              \node[mycircle,above right=of s] (v1) {$v_1$};
              \node[mycircle,right=of v1] (v3) {$v_3$};
              \node[mycircle,below right=of v3] (t) {$v_5$};
  
            \draw[->] (s) --node[above,  sloped, pos= 0.5]{\tiny$(5,1)$} (v1);
            \draw[->] (s) --node[below, sloped, pos= 0.5]{\tiny$(5,1)$} (v2);
            \draw[->] (v1) --node[below, sloped, pos= 0.5]{\tiny$(5,1)$} (v2);
            
            \draw[->] (v1)--node[above, sloped, pos= 0.5]{\tiny$(5,1)$}(v3);
            \draw[->] (v1)--node[above, sloped, pos= 0.25]{\tiny$(5,2)$}(v4);
            \draw[->] (v2)--node[above, sloped, pos= 0.25]{\tiny$(5,3)$}(v3);
            \draw[->] (v2)--node[below ]{\tiny$(10,100)$}(v4);
            \draw[->] (v3)--node[above, sloped, pos= 0.5]{\tiny$(5,1)$}(t);
            \draw[->] (v4)--node[below, sloped, pos= 0.5]{\tiny$(10,2)$}(t);
            \end{tikzpicture}
  
          </latex-image>
        </image> 
        The pairs are (capacity, cost) pairs, and we are trying to ship 10 tons
        of goods from <m>v_0</m> to <m>v_5</m>.
      </p>
    </introduction>
    <task>
      <statement>
        <p>
          Find a shortest path from <m>v_0</m> to <m>v_5</m>.
        </p>
      </statement>
    </task>
    <task>
      <statement>
        <p>
          Use this as an <m>\alpha</m>-path as in <xref ref="def-maxflowalgorithm"/>.
        </p>
      </statement>
    </task>
    <task>
      <statement>
        <p>
          Adjust capacities appropriately and remove any fuly capacitated edges.
        </p>
      </statement>
    </task>
    <task>
      <statement>
        <p>
          Repeat (a)-(c) until we have a flow of 10.
        </p>
      </statement>
    </task>
    <task>
      <statement>
        <p>
          Argue that this is not the lowest cost flow.
        </p>
      </statement>
    </task>
  </exploration> 

  <definition xml:id="def-mincostflowalgorithm">
    <title>Minimum Cost Flow Algorithm</title>
    <statement>
      <p>
        The steps for the <em>Minimum Cost Flow Algorithm</em> are as follows:
      </p>
      <ol>
        <li>
          <p>
            INITIALIZE: Let <m>N=(V, E)</m> be a weighted capacitated network with a unique source <m>v_s</m> and sink <m>v_d</m>, with no edges going into
            the source and no edges coming out of the sink.  We start with the zero flow <m>x_{ij}=0</m>
            for each edge <m>(v_i, v_j)</m>.  Let <m>F</m> be the desired total flow.
          </p>
        </li>
        <li>
          <p>
            If <m>\displaystyle \varphi(v_d)=\sum_{i} x_{id}=F</m>, STOP, we have reached a total flow of <m>F</m>.
          </p>
        </li>
        <li>
          <p>
            Form a weighted network <m>N'=(V', E')</m> as follows:
            <ul>
              <li>
                <p>
                  Let <m>V'=V</m>
                </p>
              </li>
              <li>
                <p>
                  Let <m>(v_i, v_j)\in E'</m> if and only if <m>x_{ij}\lt c_{ij}</m>.  Let <m>w'_{ij}=w_{ij}</m>.
                </p>
              </li>
              <li>
                <p>
                  Let <m>(v_j, v_i)\in E'</m> if and only if <m>x_{ij} > 0</m>.  Let <m>w'_{ij}=-w_{ij}</m>.
                </p>
              </li>
            </ul>
          </p>
        </li>
        <li>
          <p>
            Apply the shortest path algorithm on <m>N'</m> to find the shortest path from <m>v_s</m> to <m>v_d</m>.
            If no path exists STOP, there is no flow with total value <m>F</m>.
          </p>
        </li>
        <li>
          <p>
            Find the <m>\alpha</m>-path corresponding to the shortest path found in (4).  Let <me>q = \displaystyle \min_{(v_i, v_j) \in \alpha}\left\{ \min_{(v_i, v_j)\text{ forward }}\{c_{ij}-x_{ij}\}, \min_{(v_i, v_j)\text{ backwards }}\{F-\varphi(v_d) \}\right\}</me> 
          </p>
        </li>
        <li>
          <p>
            Add <m>q</m> to each forward <m>x_{ij}</m> in <m>\alpha</m>, and subtract <m>q</m> from each backwards <m>x_{ij}</m> in <m>\alpha</m>.
          </p>
        </li>
        <li>
          <p>
            GOTO 2.
          </p>
        </li>
      </ol>
    </statement>
  </definition>


  

  

</section>